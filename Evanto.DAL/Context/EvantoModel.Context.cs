

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Evanto.DAL.Context
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class EvantoContext : DbContext
{
    public EvantoContext()
        : base("name=EvantoContext")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Booking> Booking { get; set; }

    public virtual DbSet<BookingStatus> BookingStatus { get; set; }

    public virtual DbSet<Claim> Claim { get; set; }

    public virtual DbSet<Client> Client { get; set; }

    public virtual DbSet<ClientStatus> ClientStatus { get; set; }

    public virtual DbSet<ContentType> ContentType { get; set; }

    public virtual DbSet<CouponType> CouponType { get; set; }

    public virtual DbSet<DiscountCoupon> DiscountCoupon { get; set; }

    public virtual DbSet<DiscountCouponStatus> DiscountCouponStatus { get; set; }

    public virtual DbSet<DiscountType> DiscountType { get; set; }

    public virtual DbSet<EventService> EventService { get; set; }

    public virtual DbSet<EventType> EventType { get; set; }

    public virtual DbSet<Feedback> Feedback { get; set; }

    public virtual DbSet<FeedbackStatus> FeedbackStatus { get; set; }

    public virtual DbSet<FeedbackType> FeedbackType { get; set; }

    public virtual DbSet<File> File { get; set; }

    public virtual DbSet<FileType> FileType { get; set; }

    public virtual DbSet<Gender> Gender { get; set; }

    public virtual DbSet<Language> Language { get; set; }

    public virtual DbSet<Notification> Notification { get; set; }

    public virtual DbSet<NotificationConsumerType> NotificationConsumerType { get; set; }

    public virtual DbSet<NotificationStatus> NotificationStatus { get; set; }

    public virtual DbSet<NotificationType> NotificationType { get; set; }

    public virtual DbSet<Payment> Payment { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatus { get; set; }

    public virtual DbSet<PaymentType> PaymentType { get; set; }

    public virtual DbSet<Period> Period { get; set; }

    public virtual DbSet<Rating> Rating { get; set; }

    public virtual DbSet<RealtimeConnection> RealtimeConnection { get; set; }

    public virtual DbSet<Resource> Resource { get; set; }

    public virtual DbSet<ResourceText> ResourceText { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<Service> Service { get; set; }

    public virtual DbSet<ServicePeriodPrice> ServicePeriodPrice { get; set; }

    public virtual DbSet<SmsStatus> SmsStatus { get; set; }

    public virtual DbSet<SmsType> SmsType { get; set; }

    public virtual DbSet<User> User { get; set; }

    public virtual DbSet<UserActivation> UserActivation { get; set; }

    public virtual DbSet<UserClaim> UserClaim { get; set; }

    public virtual DbSet<UserEvent> UserEvent { get; set; }

    public virtual DbSet<UserService> UserService { get; set; }

    public virtual DbSet<UserSetting> UserSetting { get; set; }

    public virtual DbSet<UserStatus> UserStatus { get; set; }

    public virtual DbSet<UserType> UserType { get; set; }

    public virtual DbSet<UserVerification> UserVerification { get; set; }

    public virtual DbSet<UserVerificationType> UserVerificationType { get; set; }

    public virtual DbSet<Vendor> Vendor { get; set; }

    public virtual DbSet<VendorService> VendorService { get; set; }

    public virtual DbSet<VendorServiceExceptionalEvent> VendorServiceExceptionalEvent { get; set; }

    public virtual DbSet<VendorServicePacket> VendorServicePacket { get; set; }

    public virtual DbSet<VendorServicePacketStatus> VendorServicePacketStatus { get; set; }

    public virtual DbSet<VendorStatus> VendorStatus { get; set; }

    public virtual DbSet<SmsQueue> SmsQueue { get; set; }


    public virtual ObjectResult<ErrorResult> GetResourceText(string origin, string resourceKey, Nullable<int> languageId)
    {

        var originParameter = origin != null ?
            new ObjectParameter("Origin", origin) :
            new ObjectParameter("Origin", typeof(string));


        var resourceKeyParameter = resourceKey != null ?
            new ObjectParameter("ResourceKey", resourceKey) :
            new ObjectParameter("ResourceKey", typeof(string));


        var languageIdParameter = languageId.HasValue ?
            new ObjectParameter("LanguageId", languageId) :
            new ObjectParameter("LanguageId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ErrorResult>("GetResourceText", originParameter, resourceKeyParameter, languageIdParameter);
    }


    public virtual ObjectResult<Booking> SearchBooking(Nullable<int> id, Nullable<int> userId, Nullable<int> vendorId, Nullable<int> userServiceId, Nullable<int> statusId, Nullable<System.DateTime> bookDate, Nullable<System.DateTime> createdDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var vendorIdParameter = vendorId.HasValue ?
            new ObjectParameter("VendorId", vendorId) :
            new ObjectParameter("VendorId", typeof(int));


        var userServiceIdParameter = userServiceId.HasValue ?
            new ObjectParameter("UserServiceId", userServiceId) :
            new ObjectParameter("UserServiceId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var bookDateParameter = bookDate.HasValue ?
            new ObjectParameter("BookDate", bookDate) :
            new ObjectParameter("BookDate", typeof(System.DateTime));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Booking>("SearchBooking", idParameter, userIdParameter, vendorIdParameter, userServiceIdParameter, statusIdParameter, bookDateParameter, createdDateParameter);
    }


    public virtual ObjectResult<Booking> SearchBooking(Nullable<int> id, Nullable<int> userId, Nullable<int> vendorId, Nullable<int> userServiceId, Nullable<int> statusId, Nullable<System.DateTime> bookDate, Nullable<System.DateTime> createdDate, MergeOption mergeOption)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var vendorIdParameter = vendorId.HasValue ?
            new ObjectParameter("VendorId", vendorId) :
            new ObjectParameter("VendorId", typeof(int));


        var userServiceIdParameter = userServiceId.HasValue ?
            new ObjectParameter("UserServiceId", userServiceId) :
            new ObjectParameter("UserServiceId", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var bookDateParameter = bookDate.HasValue ?
            new ObjectParameter("BookDate", bookDate) :
            new ObjectParameter("BookDate", typeof(System.DateTime));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Booking>("SearchBooking", mergeOption, idParameter, userIdParameter, vendorIdParameter, userServiceIdParameter, statusIdParameter, bookDateParameter, createdDateParameter);
    }


    public virtual ObjectResult<DiscountCoupon> SearchDiscountCoupon(Nullable<int> id, Nullable<int> statusId, Nullable<int> couponTypeId, Nullable<int> discountTypeId, string couponNumber, Nullable<System.DateTime> createdDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var couponTypeIdParameter = couponTypeId.HasValue ?
            new ObjectParameter("CouponTypeId", couponTypeId) :
            new ObjectParameter("CouponTypeId", typeof(int));


        var discountTypeIdParameter = discountTypeId.HasValue ?
            new ObjectParameter("DiscountTypeId", discountTypeId) :
            new ObjectParameter("DiscountTypeId", typeof(int));


        var couponNumberParameter = couponNumber != null ?
            new ObjectParameter("CouponNumber", couponNumber) :
            new ObjectParameter("CouponNumber", typeof(string));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiscountCoupon>("SearchDiscountCoupon", idParameter, statusIdParameter, couponTypeIdParameter, discountTypeIdParameter, couponNumberParameter, createdDateParameter);
    }


    public virtual ObjectResult<DiscountCoupon> SearchDiscountCoupon(Nullable<int> id, Nullable<int> statusId, Nullable<int> couponTypeId, Nullable<int> discountTypeId, string couponNumber, Nullable<System.DateTime> createdDate, MergeOption mergeOption)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var statusIdParameter = statusId.HasValue ?
            new ObjectParameter("StatusId", statusId) :
            new ObjectParameter("StatusId", typeof(int));


        var couponTypeIdParameter = couponTypeId.HasValue ?
            new ObjectParameter("CouponTypeId", couponTypeId) :
            new ObjectParameter("CouponTypeId", typeof(int));


        var discountTypeIdParameter = discountTypeId.HasValue ?
            new ObjectParameter("DiscountTypeId", discountTypeId) :
            new ObjectParameter("DiscountTypeId", typeof(int));


        var couponNumberParameter = couponNumber != null ?
            new ObjectParameter("CouponNumber", couponNumber) :
            new ObjectParameter("CouponNumber", typeof(string));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiscountCoupon>("SearchDiscountCoupon", mergeOption, idParameter, statusIdParameter, couponTypeIdParameter, discountTypeIdParameter, couponNumberParameter, createdDateParameter);
    }


    public virtual ObjectResult<User> SearchUser(Nullable<int> id, string username, Nullable<System.DateTime> registrationDate, Nullable<int> maritalStatus, Nullable<System.DateTime> birthday, Nullable<int> type)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var usernameParameter = username != null ?
            new ObjectParameter("Username", username) :
            new ObjectParameter("Username", typeof(string));


        var registrationDateParameter = registrationDate.HasValue ?
            new ObjectParameter("RegistrationDate", registrationDate) :
            new ObjectParameter("RegistrationDate", typeof(System.DateTime));


        var maritalStatusParameter = maritalStatus.HasValue ?
            new ObjectParameter("MaritalStatus", maritalStatus) :
            new ObjectParameter("MaritalStatus", typeof(int));


        var birthdayParameter = birthday.HasValue ?
            new ObjectParameter("Birthday", birthday) :
            new ObjectParameter("Birthday", typeof(System.DateTime));


        var typeParameter = type.HasValue ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("SearchUser", idParameter, usernameParameter, registrationDateParameter, maritalStatusParameter, birthdayParameter, typeParameter);
    }


    public virtual ObjectResult<User> SearchUser(Nullable<int> id, string username, Nullable<System.DateTime> registrationDate, Nullable<int> maritalStatus, Nullable<System.DateTime> birthday, Nullable<int> type, MergeOption mergeOption)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var usernameParameter = username != null ?
            new ObjectParameter("Username", username) :
            new ObjectParameter("Username", typeof(string));


        var registrationDateParameter = registrationDate.HasValue ?
            new ObjectParameter("RegistrationDate", registrationDate) :
            new ObjectParameter("RegistrationDate", typeof(System.DateTime));


        var maritalStatusParameter = maritalStatus.HasValue ?
            new ObjectParameter("MaritalStatus", maritalStatus) :
            new ObjectParameter("MaritalStatus", typeof(int));


        var birthdayParameter = birthday.HasValue ?
            new ObjectParameter("Birthday", birthday) :
            new ObjectParameter("Birthday", typeof(System.DateTime));


        var typeParameter = type.HasValue ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("SearchUser", mergeOption, idParameter, usernameParameter, registrationDateParameter, maritalStatusParameter, birthdayParameter, typeParameter);
    }


    public virtual ObjectResult<UserEvent> SearchUserEvent(Nullable<int> id, Nullable<int> userId, Nullable<int> eventId, Nullable<bool> status, Nullable<System.DateTime> eventDate, Nullable<System.DateTime> createdDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var eventIdParameter = eventId.HasValue ?
            new ObjectParameter("EventId", eventId) :
            new ObjectParameter("EventId", typeof(int));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        var eventDateParameter = eventDate.HasValue ?
            new ObjectParameter("EventDate", eventDate) :
            new ObjectParameter("EventDate", typeof(System.DateTime));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserEvent>("SearchUserEvent", idParameter, userIdParameter, eventIdParameter, statusParameter, eventDateParameter, createdDateParameter);
    }


    public virtual ObjectResult<UserEvent> SearchUserEvent(Nullable<int> id, Nullable<int> userId, Nullable<int> eventId, Nullable<bool> status, Nullable<System.DateTime> eventDate, Nullable<System.DateTime> createdDate, MergeOption mergeOption)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var eventIdParameter = eventId.HasValue ?
            new ObjectParameter("EventId", eventId) :
            new ObjectParameter("EventId", typeof(int));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        var eventDateParameter = eventDate.HasValue ?
            new ObjectParameter("EventDate", eventDate) :
            new ObjectParameter("EventDate", typeof(System.DateTime));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserEvent>("SearchUserEvent", mergeOption, idParameter, userIdParameter, eventIdParameter, statusParameter, eventDateParameter, createdDateParameter);
    }


    public virtual ObjectResult<UserService> SearchUserService(Nullable<int> id, Nullable<int> userId, Nullable<int> serviceId, Nullable<int> userEventId, Nullable<bool> status, Nullable<System.DateTime> createdDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var serviceIdParameter = serviceId.HasValue ?
            new ObjectParameter("ServiceId", serviceId) :
            new ObjectParameter("ServiceId", typeof(int));


        var userEventIdParameter = userEventId.HasValue ?
            new ObjectParameter("UserEventId", userEventId) :
            new ObjectParameter("UserEventId", typeof(int));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserService>("SearchUserService", idParameter, userIdParameter, serviceIdParameter, userEventIdParameter, statusParameter, createdDateParameter);
    }


    public virtual ObjectResult<UserService> SearchUserService(Nullable<int> id, Nullable<int> userId, Nullable<int> serviceId, Nullable<int> userEventId, Nullable<bool> status, Nullable<System.DateTime> createdDate, MergeOption mergeOption)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(int));


        var serviceIdParameter = serviceId.HasValue ?
            new ObjectParameter("ServiceId", serviceId) :
            new ObjectParameter("ServiceId", typeof(int));


        var userEventIdParameter = userEventId.HasValue ?
            new ObjectParameter("UserEventId", userEventId) :
            new ObjectParameter("UserEventId", typeof(int));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserService>("SearchUserService", mergeOption, idParameter, userIdParameter, serviceIdParameter, userEventIdParameter, statusParameter, createdDateParameter);
    }

}

}

